import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Membaca DataFrame dari file CSV
products = pd.read_csv('data_produk.csv')
sales = pd.read_csv('data_penjualan.csv')
inventory = pd.read_csv('data_persediaan.csv')
production = pd.read_csv('data_produksi.csv')

# Pastikan kolom Quantity_Sold bertipe data numerik
sales['Quantity_Sold'] = pd.to_numeric(sales['Quantity_Sold'], errors='coerce')

# Total penjualan per produk di setiap region
total_sales_region = sales.groupby(['Product_ID', 'Region'])['Quantity_Sold'].sum().reset_index()
total_sales_region = total_sales_region.merge(products, on='Product_ID')

# Visualisasi
plt.figure(figsize=(12, 6))
sns.barplot(data=total_sales_region, x='Product_Name', y='Quantity_Sold', hue='Region')
plt.title('Total Penjualan per Produk di Setiap Region')
plt.xlabel('Nama Produk')
plt.ylabel('Jumlah Terjual')
plt.legend(title='Region')
plt.grid(True)
plt.tight_layout()
plt.show()

# Konversi Sale_Date ke datetime dan ekstraksi bulan
sales['Sale_Date'] = pd.to_datetime(sales['Sale_Date'], errors='coerce')
# Periksa apakah ada nilai yang tidak dapat dikonversi menjadi datetime
invalid_dates = sales[sales['Sale_Date'].isnull()]
if not invalid_dates.empty:
    print("Terdapat nilai tanggal yang tidak valid dan akan dihapus:")
    print(invalid_dates)
    sales = sales.dropna(subset=['Sale_Date'])

# Mengekstrak informasi bulan dari Sale_Date
sales['Month'] = sales['Sale_Date'].dt.to_period('M')

# Pastikan Quantity_Sold bertipe data numerik
sales['Quantity_Sold'] = pd.to_numeric(sales['Quantity_Sold'], errors='coerce')

# Periksa apakah ada nilai yang tidak valid di Quantity_Sold
invalid_quantities = sales[sales['Quantity_Sold'].isnull()]
if not invalid_quantities.empty:
    print("Terdapat nilai Quantity_Sold yang tidak valid dan akan dihapus:")
    print(invalid_quantities)
    sales = sales.dropna(subset=['Quantity_Sold'])

# Total penjualan bulanan
total_sales_month = sales.groupby('Month')['Quantity_Sold'].sum().reset_index()

# Konversi Month menjadi string agar seaborn dapat menggunakannya sebagai label x
total_sales_month['Month'] = total_sales_month['Month'].astype(str)

# Visualisasi tren penjualan bulanan
plt.figure(figsize=(12, 6))
sns.lineplot(data=total_sales_month, x='Month', y='Quantity_Sold', marker='o')
plt.title('Tren Penjualan Bulanan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Terjual')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Menghitung stok akhir
inventory_stock = inventory[['Product_ID', 'Stock_Level']].rename(columns={'Stock_Level': 'Initial_Stock'})
production_stock = production.groupby('Product_ID')['Quantity_Produced'].sum().reset_index()
sales_stock = sales.groupby('Product_ID')['Quantity_Sold'].sum().reset_index()

# Menggabungkan semua data
stock_data = inventory_stock.merge(production_stock, on='Product_ID')
stock_data = stock_data.merge(sales_stock, on='Product_ID')
stock_data['Ending_Stock'] = stock_data['Initial_Stock'] + stock_data['Quantity_Produced'] - stock_data['Quantity_Sold']

# Visualisasi
plt.figure(figsize=(12, 6))
stock_data_melted = stock_data.melt(id_vars='Product_ID', value_vars=['Initial_Stock', 'Quantity_Produced', 'Quantity_Sold', 'Ending_Stock'], var_name='Stock_Type', value_name='Quantity')
stock_data_melted = stock_data_melted.merge(products, on='Product_ID')

sns.barplot(data=stock_data_melted, x='Product_Name', y='Quantity', hue='Stock_Type')
plt.title('Perbandingan Stok Awal, Produksi, Penjualan, dan Stok Akhir')
plt.xlabel('Nama Produk')
plt.ylabel('Kuantitas')
plt.legend(title='Tipe Stok')
plt.show()
